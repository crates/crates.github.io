{"version":3,"sources":["main.js"],"names":["resizeIframe","pageWidth","document","getElementById","clientWidth","experience","setAttribute","iframeHeight","clientHeight","contentWindow","location","reload","window","addEventListener","setTimeout","body","classList","add"],"mappings":"CACA,WACA,YAEA,SAAAA,KACA,GAAAC,GAAAC,SAAAC,eAAA,YAAAC,YACAC,EAAAH,SAAAC,eAAA,kBACAE,GAAAC,aAAA,QAAAL,EAAA,IACA,IAAAM,GAAAF,EAAAG,YACAH,GAAAC,aAAA,MAAA,sLAAAC,GACAF,EAAAI,cAAAC,SAAAC,SAGAX,IACAY,OAAAC,iBAAA,SAAAb,GAEAc,WAAA,WACAd,KACA,KAEAc,WAAA,WACAZ,SAAAa,KAAAC,UAAAC,IAAA,WACA","file":"main.min.js","sourcesContent":["/* eslint-env browser */\n(function() {\n  'use strict';\n\n  function resizeIframe() {\n    var pageWidth = document.getElementById('main-nav').clientWidth;\n    var experience = document.getElementById('work-experience');\n    experience.setAttribute('width', pageWidth - 100);\n    var iframeHeight = experience.clientHeight;\n    experience.setAttribute('src', '//cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1mb3sLdi1RVMhlj7aAcgORID45zoVQPKzmjWFkSfgfW4&font=Fjalla-Average&lang=en&start_at_end=true&initial_zoom=2&height=' + iframeHeight);\n    experience.contentWindow.location.reload();\n  }\n\n  resizeIframe();\n  window.addEventListener('resize', resizeIframe);\n\n  setTimeout(function() {\n    resizeIframe();\n  }, 5000);\n\n  setTimeout(function() {\n    document.body.classList.add('loaded');\n  }, 100);\n/*\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n  */\n})();\n"]}